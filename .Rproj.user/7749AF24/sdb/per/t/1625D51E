{
    "contents" : "---\ntitle: \"Intro to ggplot2\"\nauthor: \"Ted Laderas\"\ndate: \"March 11, 2015\"\noutput: slidy_presentation\n---\n\n## Intro to Hadleyland\n\nHW started building solutions to specific R problems as part of his dissertation work, expanding to form an empire within R.\n\n- plyr (How do I apply functions to different data structures?)\n- reshape2 (How can I change/summarize data from one form to another)\n- ggplot2 (How can I make pretty graphics?)\n- dplyr (Common data manipulations on tables)\n- testthat (Unit testing framework for R)\n\n## The Grammar of Graphics\n\nggplot2 is a graphical plotting package that utilizes a \"grammar of graphics\":\n\n```{r eval=FALSE, tidy=TRUE}\nggplot(iris) + geom_point(aes(x=Sepal.Length, y=Sepal.Width)) + theme_minimal()\n```\n\n* Specify data with ggplot()\n* Specify data representation with geoms (layer) \n    * (bar, line, scatter, heatmap, etc)\n* Specify data mapping with aes() \n    * (x, y, Color) \n* Subset data with facets\n* Change the look around with themes\n* Add other properties (titles, etc)\n\n## Simple Example\n```{r fig.height=3}\nlibrary(ggplot2)\ndata(iris)\nggplot(iris) + geom_point(aes(x= Sepal.Width, y=Sepal.Length)) + theme_minimal()\n```\n\n## aes() - the Aesthetic Function\n\naes() lets you map a variable to a visual property of the geom. Aesthetics can include:\n\n- x or y (almost any geom)\n- size\n- color (point or line)\n- shape (point)\n- linetype (line)\n- fill (rect, bar, histogram)\n\nDocumentation for aes() is remarkably terrible, as it's different for each geom. Look at the documentation for each geom for a list of mappable aesthetics.\n\n## Let's get fancier and add coloring\n```{r fig.height=3}\nggplot(iris) + geom_point(aes(x= Sepal.Width, y=Sepal.Length, color=Species))\n```\n\n## Using a continuous variable\n```{r}\nggplot(iris) + geom_point(aes(x= Sepal.Width, y=Sepal.Length, color=Petal.Length))\n```\n\n## Other aesthetic attributes: Size\n```{r,warning=FALSE}\nggplot(iris) + geom_point(aes(x= Sepal.Width, y=Sepal.Length, size=Petal.Length, color=Species))\n```\n\n## Geoms - lots of them\n\nCommon geoms to use are below. Each of these requires a different aesthetic mapping.\n\n- geom_point() - scatterplot\n- geom_line() - line\n- geom_bar() - barplot - requires \n- geom_boxplot() - boxplot\n- geom_tile() - \"heatmap\"\n- geom_histogram() - histogram\n\nI will try to talk about two or three of them.\n\n## Histograms\n\n```{r ,warning=FALSE}\nggplot(iris) + geom_histogram(aes(x= Sepal.Width))\n```\n\n## Boxplots\n\n```{r,warning=FALSE}\nggplot(iris) + geom_boxplot(aes(x=Species, y=Sepal.Width))\n```\n\n## Layering geoms\n\nWhere ggplot2 becomes very powerful is that it allows you to layer geoms. Here we're looking at a smoothed version of the data over all coordinates using loess smoothing.\n\n```{r,warning=FALSE}\nggplot(iris) + geom_point(aes(x= Sepal.Width, y=Sepal.Length)) + \n  geom_smooth(aes(x= Sepal.Width, y=Sepal.Length))\n```\n\n## Facets - Subsetting the data\nPerhaps we want to visualize the data onto three separate plots (one for each species). \nWe can do this with facets:\n\n```{r,warning=FALSE}\nggplot(iris) + geom_point(aes(x= Sepal.Width, y=Sepal.Length)) + \n  facet_grid(facets=Species ~ .)\n```\n\nFor rows, we can change the facet_grid() order:\n\n```{r eval=FALSE,warning=FALSE}\nggplot(iris) + geom_point(aes(x= Sepal.Width, y=Sepal.Length)) + \n  facet_grid(facets=. ~ Species)\n```\n\n## Theme properties and scaling\n\nThe look of everything on the graph can be customized, including\n\n- color scale (continuous or discrete colors)\n- order of elements\n- fonts of everything\n- labels and legends\n\nSee ?theme for more information. Also: http://sharpstatistics.co.uk/r/ggplot2-guide/\n\n## Theme properties\n\nThe default theme is called theme_grey(). You can see all of the properties of a theme by looking at it.\n\n```{r}\ntheme_grey()\n```\n\n## Making a new theme\n\nTo customize the theme, you must use elements to fill out the various properties of the theme list. Each of these properties maps to a specific element, either element_text, element_rect, or element_line.\n\nFor example, we want a white background and different fonts for the axis titles.\n```{r}\ntheme_new <- theme(panel.background = element_rect(fill = \"white\"), \n                   axis.title.x = element_text(family = \"Times New Roman\"),\n                   axis.title.y = element_text(family = \"Arial\"))\n\n```\n\n## Trying our new theme out\n\n```{r,warning=FALSE}\nggplot(iris) + geom_point(aes(x= Sepal.Width, y=Sepal.Length)) + theme_new\n```\n\n## Changing a discrete color scale\n\n```{r fig.height=3}\nggplot(iris) + geom_point(aes(x= Sepal.Width, y=Sepal.Length, color=Species)) +\n  scale_color_manual(values= c(\"blue\", \"purple\", \"gold\"))  \n```\n\n## If your data is originally in a matrix like format\n\nFor bioinformaticians, we often work with a matrix like format where genes are rows and samples are columns. This \"wide\" data format is not really usable by ggplot.  \n\nWe need to \"melt\" the data frame to make it easier for ggplot to work with. Our melted data frame will have one data point for row, and additional Gene and Sample Columns.  First we load our data in.\n\n```{r}\nlibrary(reshape2)\nexpData <- read.delim(\"matrix-example.txt\")\nexpData\n```\n\n## Melting the data into longform data\n\nThen we melt the data using the melt() function:\n\n```{r}\nexpDataMelt <- melt(expData, id.vars=\"Gene\")\nexpDataMelt\n```\n\n## Making a heatmap with our melted data\n\n```{r}\nggplot(expDataMelt) + geom_tile(aes(x=variable, y=Gene, fill=value)) + \n  scale_fill_gradient(low=\"white\", high = \"darkgreen\")\n```\n\n## Making a line plot with our melted data\n\nLet's plot the expression values as a line plot. To do this we need to tell ggplot2 that we want to plot each line by gene group. Additionaly we want a facet for each gene.\n\n```{r}\nggplot(expDataMelt) + geom_line(aes(x=variable, y=value, color=Gene, group=Gene)) + \n  facet_grid(facets= Gene ~.)\n```\n\n## Interactive plots with ggvis\n\nggplot2 is great for static graphics. But for interactive graphics that allow you to change parameters, you will need to learn ggvis.\n\nThe good news: ggvis uses a similar grammar.\nThe bad news: everything has a different name. Learning how to parametrize a plot can be tricky.\n\n## Thanks!\n\n- Hadley Wickham for ggplot2 and ggvis\n- Eric Leung for showing us knitR/Sweave\n\n## Future Topics?\n\n- Faculty Research Map\n- OHSU Graduates in the real world\n",
    "created" : 1426132074371.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "490631171",
    "id" : "1625D51E",
    "lastKnownWriteTime" : 1426131260,
    "path" : "~/Code/ggplot2-Intro/ggplot2Intro.Rmd",
    "project_path" : "ggplot2Intro.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}